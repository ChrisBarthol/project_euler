 #  The sequence of triangle numbers is generated by adding the natural
 #   numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
 #   28. The first ten terms would be:

 #                    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 #   Let us list the factors of the first seven triangle numbers:

 #      1: 1
 #      3: 1,3
 #      6: 1,2,3,6
 #     10: 1,2,5,10
 #     15: 1,3,5,15
 #     21: 1,3,7,21
 #     28: 1,2,4,7,14,28

 # #  We can see that 28 is the first triangle number to have over five
 # #  divisors.

 # #  What is the value of the first triangle number to have over five hundred
 # #  divisors?

 require 'prime'

#create triangle numbers
 def triangle(num)
    trianglenumber = 0 
    0.upto(num).inject(0) {|trianglenumber, number| trianglenumber += number}
 end

#get the number of divisors
  def divisors(num)
    count = []
    factors = Prime.prime_division(num)
    #prime_division returns nested array of [[prime, #of times],[prime, #oftimes]]
    #just want the second value of each subarray
    factors.flatten.each_with_index do |value, i|
      if i%2 != 0
        count << value
      end
    end
    #add one to each and multiply 
    num_of_divisors = count.collect{|m| m+1}.inject(:*)
  end

start = 10
count = 0
while divisors(triangle(start)) <= 500
  start += 1
  count = divisors(triangle(start))
end

puts start
puts triangle(start)
puts divisors(triangle(start))

        
#Have not checked answer as project euler is down.


